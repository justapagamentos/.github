name: Squad CD
on:
  push:
    tags:
      - "*@v*.*.*"
jobs:
 build:
  name: Build Docker Image
  runs-on: ubuntu-latest
  steps:
    - uses: actions/checkout@v2
    - name: Pega tag da versão
      id: get_version
      run: |
        echo "::set-output name=SQUAD::$(echo $GITHUB_REF | cut -d / -f 3 | cut -d @ -f 1)"
        echo "::set-output name=VERSION::$(echo $GITHUB_REF | cut -d @ -f 2)"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: sa-east-1

    - name: Seta Java 11
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Builda projeto
      uses: eskatos/gradle-command-action@v1
      with:
        gradle-version: 6.9
        arguments: build -x test

    - name: Login no Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.SERVICE_NAME }}
        IMAGE_TAG: ${{ steps.get_version.outputs.VERSION }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

 deploy:
    name: Deploy To K8s
    runs-on: ubuntu-latest
    needs: build
    steps:

      - name: Pega tag da versão
        id: get_version
        run: |
          echo "::set-output name=SQUAD::$(echo $GITHUB_REF | cut -d / -f 3 | cut -d @ -f 1)"
          echo "::set-output name=VERSION::$(echo $GITHUB_REF | cut -d @ -f 2)"

      - name: Printa Tag
        run: echo ${{ steps.get_version.outputs.VERSION }}

      - name: Printa Squad
        run: echo ${{ steps.get_version.outputs.SQUAD }}

      - name: Configure AWS credentials
        if: contains(steps.get_version.outputs.VERSION, 'rc')
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_STAGING }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_SECRET_STAGING }}
          aws-region: ${{ secrets.AWS_STG_REGION }}

      - name: Checkout k8s manifest
        uses: actions/checkout@v2
        with:
          repository: justapagamentos/jst-enviroments
          token: ${{ secrets.PAT }}

      - name: Aplica nova versao (stg)
        if: contains(steps.get_version.outputs.VERSION, 'rc')
        uses: viniciustass/kubectl-helm-action@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA_STG }}
        with:
          args: |
            cd helm
            sed -i "s/{VERSION}/${{ steps.get_version.outputs.VERSION }}/g" ./${{ secrets.SERVICE_NAME }}/Chart.yaml
            helm upgrade ${{ secrets.SERVICE_NAME }} ./${{ secrets.SERVICE_NAME }} --install --debug -n ${{ steps.get_version.outputs.SQUAD }}
